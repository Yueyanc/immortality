{"version":3,"sources":["../index.ts"],"sourcesContent":["import xml2js from \"xml2js\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport {\n  TagTree,\n  TagType,\n  transformXMLObjectToTree,\n  treeToList,\n} from \"./packages/shared/utils/index\";\nimport _ from \"lodash\";\nconst root = process.cwd();\nconst parser = new xml2js.Parser({\n  valueProcessors: [\n    (value, name) => {\n      console.log(\"value\", value, name);\n      return value;\n    },\n  ],\n});\nasync function parseXmlByPath(filePath: string) {\n  const content = fs.readFileSync(filePath);\n  return await parser.parseStringPromise(content);\n}\nfunction findXmlFiles(folderPath: string) {\n  const files = fs.readdirSync(folderPath);\n  let xmlFilesPatch: string[] = [];\n\n  files.forEach((file) => {\n    const filePath = path.join(folderPath, file);\n    const stat = fs.statSync(filePath);\n\n    if (stat.isDirectory()) {\n      // 如果是文件夹，则递归调用 findXmlFilesh 函数\n      xmlFilesPatch = xmlFilesPatch.concat(findXmlFiles(filePath));\n    } else if (path.extname(file) === \".xml\") {\n      // 如果是 .xml 文件，则将其添加到结果数组中\n      xmlFilesPatch.push(filePath);\n    }\n  });\n  return xmlFilesPatch;\n}\nasync function main() {\n  const pathList = findXmlFiles(path.join(root, \"./packages/Core\"));\n  for (const filePath of pathList) {\n    const obj = await parseXmlByPath(pathList[6]);\n    // console.dir(obj, { depth: null });\n\n    const defs = collectDefs(obj.Defs);\n    defs.forEach((def) => {\n      def.path = filePath;\n    });\n  }\n  // console.dir(collectDefs(obj.Defs), { depth: null });\n}\nfunction collectDefs(defs: Record<string, any>) {\n  const arr: any[] = [];\n  Object.keys(defs).map((key) => {\n    const value = defs[key];\n    arr.push(\n      ...value.map((item: any) => ({\n        defName: item.defName,\n        key,\n        abstract: value?.$?.abstract === \"true\",\n      }))\n    );\n  });\n  return arr;\n}\nmain();\n\n// async function main() {\n//   const nodeValueMap: Record<string, any[]> = {};\n//   const pathList = findXmlFiles(path.join(root, \"./packages/Core\"));\n//   const allScanNode = [];\n//   for (const xmlPath of pathList) {\n//     const obj = await parseXmlByPath(xmlPath);\n//     const tree = transformXMLObjectToTree(obj);\n//     const list = treeToList(tree).filter(\n//       (item) =>\n//         item.$tagType === TagType.Node &&\n//         item.$childrens?.find((child) => child.$tagType === TagType.Text)\n//     );\n//     allScanNode.push(...list);\n//   }\n//   allScanNode.forEach((item) => {\n//     const nodeValue = nodeValueMap[item.$tagName as string];\n//     if (nodeValue) {\n//       Array.isArray(item.$childrens) && nodeValue.push(...item.$childrens);\n//     } else {\n//       nodeValueMap[item.$tagName as string] = item.$childrens as TagTree[];\n//     }\n//   });\n//   Object.keys(nodeValueMap).forEach((key) => {\n//     nodeValueMap[key] = _.unionBy(nodeValueMap[key], (item) => item.value).map(\n//       (item) => item.value\n//     );\n//   });\n//   console.dir(nodeValueMap);\n//   fs.writeFileSync(\n//     path.join(root, \"./valueMap.js\"),\n//     `export default \\n${JSON.stringify(nodeValueMap)}\\n`\n//   );\n// }\n// main();\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,YAAY;AACnB,OAAO,UAAU;AACjB,OAAO,QAAQ;AAQf,IAAM,OAAO,QAAQ,IAAI;AACzB,IAAM,SAAS,IAAI,OAAO,OAAO;AAAA,EAC/B,iBAAiB;AAAA,IACf,CAAC,OAAO,SAAS;AACf,cAAQ,IAAI,SAAS,OAAO,IAAI;AAChC,aAAO;AAAA,IACT;AAAA,EACF;AACF,CAAC;AACD,SAAe,eAAe,UAAkB;AAAA;AAC9C,UAAM,UAAU,GAAG,aAAa,QAAQ;AACxC,WAAO,MAAM,OAAO,mBAAmB,OAAO;AAAA,EAChD;AAAA;AACA,SAAS,aAAa,YAAoB;AACxC,QAAM,QAAQ,GAAG,YAAY,UAAU;AACvC,MAAI,gBAA0B,CAAC;AAE/B,QAAM,QAAQ,CAAC,SAAS;AACtB,UAAM,WAAW,KAAK,KAAK,YAAY,IAAI;AAC3C,UAAM,OAAO,GAAG,SAAS,QAAQ;AAEjC,QAAI,KAAK,YAAY,GAAG;AAEtB,sBAAgB,cAAc,OAAO,aAAa,QAAQ,CAAC;AAAA,IAC7D,WAAW,KAAK,QAAQ,IAAI,MAAM,QAAQ;AAExC,oBAAc,KAAK,QAAQ;AAAA,IAC7B;AAAA,EACF,CAAC;AACD,SAAO;AACT;AACA,SAAe,OAAO;AAAA;AACpB,UAAM,WAAW,aAAa,KAAK,KAAK,MAAM,iBAAiB,CAAC;AAChE,eAAW,YAAY,UAAU;AAC/B,YAAM,MAAM,MAAM,eAAe,SAAS,CAAC,CAAC;AAG5C,YAAM,OAAO,YAAY,IAAI,IAAI;AACjC,WAAK,QAAQ,CAAC,QAAQ;AACpB,YAAI,OAAO;AAAA,MACb,CAAC;AAAA,IACH;AAAA,EAEF;AAAA;AACA,SAAS,YAAY,MAA2B;AAC9C,QAAM,MAAa,CAAC;AACpB,SAAO,KAAK,IAAI,EAAE,IAAI,CAAC,QAAQ;AAC7B,UAAM,QAAQ,KAAK,GAAG;AACtB,QAAI;AAAA,MACF,GAAG,MAAM,IAAI,CAAC,SAAW;AA3D/B;AA2DmC;AAAA,UAC3B,SAAS,KAAK;AAAA,UACd;AAAA,UACA,YAAU,oCAAO,MAAP,mBAAU,cAAa;AAAA,QACnC;AAAA,OAAE;AAAA,IACJ;AAAA,EACF,CAAC;AACD,SAAO;AACT;AACA,KAAK;","names":[]}